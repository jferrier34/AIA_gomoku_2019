#!/usr/bin/python3
from sys import stdout, exit
from random import randint

class gomoku_ai:
    ##information fonctions
    ##
    def setTurnTimeout(self, arg):
        self.timeout_turn = arg[1]
    def setMatchTimeout(self, arg):
        self.timeout_match = arg[1]
    def setMaxMemory(self, arg):
        self.max_memory = arg[1]
    def setTimeLeft(self, arg):
        self.time_left = arg[1]
    def setGameType(self, arg):
        if len(arg) == 1:
            return
        self.game_type = arg[1]
    def setRule(self, arg):
        if len(arg) == 1:
            return
        self.rule = arg[1]
    def setEvaluate(self, arg):
        if len(arg) == 1:
            return
        self.evaluate = arg[1]
    def setFolder(self, arg):
        if len(arg) == 1:
            return
        self.folder = arg[1]
    def infoFunction(self, arg):
        if not arg:
            return
        data = arg[1]
        self.info_dictionary[data](self, arg) if data in self.info_dictionary else print("ERROR message - Unknown info = ignored")

    #PLAY FUNCTIONS
    def startFunction(self, arg):
        if (int(arg[1]) > 5):
            stdout.write("OK\n")
            self.dimension = int(arg[1])
            self.board = [[0 for i in range(0, self.dimension+4)] for j in range(0, self.dimension+4)]
            stdout.flush()
            return 0

    def beginFunction(self, arg):
        gomoku_ai.play(self)
        return 0

    def turnFunction(self, arg):
        coor = arg[1].split(",")
        x = int(coor[0])
        y = int(coor[1])
        self.board[x][y] = 2
        gomoku_ai.play(self)
        return 0

    def boardFunction(self, arg):
        i = 1
        while i == 1:
            arg = input().split(",")
            if (arg[0] == "DONE"):
                i = 2
            else:
                gomoku_ai.fill_board(self, arg)
        gomoku_ai.play(self)
        return 0

    def fill_board(self, arg):
        self.board[int(arg[0])][int(arg[1])] = int(arg[2])
        return 0

    def play(self):
        self.case = gomoku_ai.minmax(self, 1, True, 0, 0)
        if self.case[2] == 0:
            self.case[0] = randint(0, self.dimension-1)
            self.case[1] = randint(0, self.dimension-1)
        if gomoku_ai.isFree(self, self.case[0], self.case[1]):
            x = self.case[0]
            y = self.case[1]
        else:
            while gomoku_ai.isFree == False:
                x = randint(0,self.dimension-1)
                y = randint(0,self.dimension-1)
        self.board[x][y] = 1
        stdout.write(str(x) + "," + str(y) + "\n")
        stdout.flush()
        return 0

    def isFree(self, x, y):
        if x < self.dimension and y < self.dimension:
            if self.board[x][y] == 0:
                return True
            else:
                return False
        else:
            return False

    def displayBoard(self, arg):
        for i in range (0, 20):
            for j in range (0, 20):
                stdout.write(" ")
                stdout.write(str(self.board[i][j]))
            stdout.write("\n")
        stdout.write("\n")

    def minmax(self, depth, maximizingPlayer, a, b):
        if depth == 0:
            if maximizingPlayer:
                return gomoku_ai.checkBoard(self, a, b, 2)
            else:
                return gomoku_ai.checkBoard(self, a, b, 1)
        if maximizingPlayer:
            self.maxEval = [0, 0, 0]
            for i in range (0, self.dimension):
                for j in range (0, self.dimension):
                    if self.board[i][j] == 0:
                        self.board[i][j] = 1
                        posEval = gomoku_ai.minmax(self, depth - 1, False, i, j)
                        self.board[i][j] = 0
                        if self.maxEval[2] < posEval[2]:
                            self.maxEval = [i, j, posEval[2]]
            return self.maxEval
        else:
            for i in range (0,self.dimension):
                for j in range (0,self.dimension):
                    if self.board[i][j] == 0:
                        self.board[i][j] = 2
                        posEval = gomoku_ai.minmax(self, depth - 1, True, i, j)
                        self.board[i][j] = 0
                        if self.minEval[2] > posEval[2]:
                            self.minEval = [i, j, posEval[2]]
            return self.minEval

    ##CHECK FUNCTIONS
    def checkBoard(self, i, j, player):
        movements = 0
        movements += gomoku_ai.checkForThreeAndFour(self, i, j, player)
        movements += gomoku_ai.checkForTwo(self, i, j, player)
        movements += gomoku_ai.checkForThree(self, i, j, player)
        movements += gomoku_ai.checkForFour(self, i, j, player)
        movements += gomoku_ai.checkForFive(self, i, j, player)
        if player == 1:
            player = 2
        else:
            player = 1
        self.board[i][j] = player
        movements += gomoku_ai.checkForThreeAndFour(self, i, j, player)
        movements += gomoku_ai.checkForThree(self, i, j, player)
        movements += gomoku_ai.checkForFour(self, i, j, player)
        movements += gomoku_ai.checkForFive(self, i, j, player)
        return [i, j, movements]

    def checkForThreeAndFour(self, x, y, player):
        saveX = x
        saveY = y
        movements = 0
        checkOppenedThree = 0
        checkForFour = 0
        while self.board[x-1][y] == player:
            x -= 1
        if self.board[x][y] == self.board[x+1][y] == self.board[x+2][y] and gomoku_ai.checkBorder(self, x-1, y) and gomoku_ai.checkBorder(self, x+3, y) and self.board[x-1][y] == 0 and self.board[x+3][y] == 0:
                checkOppenedThree = 1
        if self.board[x][y] == self.board[x+1][y] == self.board[x+2][y] == self.board[x+3][y] and (( gomoku_ai.checkBorder(self, x-1, y) and gomoku_ai.checkBorder(self, x+4, y) and self.board[x-1][y] == 0) or self.board[x+4][y] == 0):
                checkForFour = 1
        x = saveX
        y = saveY
        while self.board[x][y-1] == player:
            y -= 1
        if self.board[x][y] == self.board[x][y+1] == self.board[x][y+2] and gomoku_ai.checkBorder(self, x, y-1) and gomoku_ai.checkBorder(self, x, y+3) and self.board[x][y-1] == 0 and self.board[x][y+3] == 0:
                checkOppenedThree = 1
        if self.board[x][y] == self.board[x][y+1] == self.board[x][y+2] == self.board[x][y+3] and (( gomoku_ai.checkBorder(self, x, y-1) and gomoku_ai.checkBorder(self, x, y+4) and self.board[x][y-1] == 0) or self.board[x][y+4] == 0):
                checkForFour = 1
        x = saveX
        y = saveY
        while self.board[x-1][y-1] == player:
            y -= 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y+1] == self.board[x+2][y+2] and gomoku_ai.checkBorder(self, x-1, y-1) and gomoku_ai.checkBorder(self, x+3, y+3) and self.board[x-1][y-1] == 0 and self.board[x+3][y+3] == 0:
                checkOppenedThree = 1
        if self.board[x][y] == self.board[x+1][y+1] == self.board[x+2][y+2] == self.board[x+3][y+3] and (( gomoku_ai.checkBorder(self, x-1, y-1) and gomoku_ai.checkBorder(self, x+4, y+4) and self.board[x-1][y-1] == 0) or self.board[x+4][y+4] == 0):
                checkForFour = 1
        x = saveX
        y = saveY
        while self.board[x-1][y+1] == player:
            y += 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y-1] == self.board[x+2][y-2] and gomoku_ai.checkBorder(self, x-1, y+1) and gomoku_ai.checkBorder(self, x+3, y-3) and self.board[x-1][y+1] == 0 and self.board[x+3][y-3] == 0:
                checkOppenedThree = 1
        if self.board[x][y] == self.board[x+1][y-1] == self.board[x+2][y-2] == self.board[x+3][y-3] and ( gomoku_ai.checkBorder(self, x-1, y+1) and gomoku_ai.checkBorder(self, x+4, y-4) and (self.board[x-1][y+1] == 0 or self.board[x+4][y-4] == 0)):
                checkForFour = 1

        if checkForFour == 1 and checkOppenedThree == 1:
            if player == 1:
                movements = self.ia_has_four_and_three
            if player == 2:
                movements = self.opponent_has_four
        return movements

    def checkForFive(self, x, y, player):
        win = 0
        movements = 0
        saveX = x
        saveY = y
        while self.board[x-1][y] == player:
            x -= 1
        if self.board[x][y] == self.board[x+1][y] == self.board[x+2][y] == self.board[x+3][y] == self.board[x+4][y]:
            win = 1
        x = saveX
        y = saveY
        while self.board[x][y-1] == player:
            y -= 1
        if self.board[x][y] == self.board[x][y+1] == self.board[x][y+2] == self.board[x][y+3] == self.board[x][y+4]:
            win = 1
        x = saveX
        y = saveY
        while self.board[x-1][y-1] == player:
            y -= 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y+1] == self.board[x+2][y+2] == self.board[x+3][y+3] == self.board[x+4][y+4]:
            win = 1
        x = saveX
        y = saveY
        while self.board[x-1][y+1] == player:
            y += 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y-1] == self.board[x+2][y-2] == self.board[x+3][y-3] == self.board[x+4][y-4]:
            win = 1

        if win == 1:
            if player == 1:
                movements = self.ia_has_five_full
            else:
                movements = self.opponent_has_five_full
        return movements

    def checkForFourWithHole(self, x, y, player):
        check = 0
        movements = 0
        count = 0
        for i in range (0,4):
            if self.board[x+i][y] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x-i][y] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x][y+i] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x][y-i] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x+i][y+i] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x-i][y+i] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x+i][y-i] == player:
                count += 1
        if count >= 4:
            check += 1
        count = 0
        for i in range (0,4):
            if self.board[x-i][y-i] == player:
                count += 1
        if count >= 4:
            check += 1
        if check >= 1:
            movements = self.ia_has_openned_four
        else:
            movements = self.ia_has_four
        return movements

    def checkForFour(self, x, y, player):
        saveX = x
        saveY = y
        movements = 0
        check = 0
        checkOppenedFour = 0
        count = 0
        while self.board[x-1][y] == player:
            x -= 1
        if self.board[x][y] == self.board[x+1][y] == self.board[x+2][y] == self.board[x+3][y]:
            if ( gomoku_ai.checkBorder(self, x-1, y) and self.board[x-1][y] == 0) or ( gomoku_ai.checkBorder(self, x+4, y) and self.board[x+4][y] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y) and gomoku_ai.checkBorder(self, x+4, y) and self.board[x-1][y] == 0 and self.board[x+4][y] == 0:
                checkOppenedFour = 1
        x = saveX
        y = saveY
        while self.board[x][y-1] == player:
            y -= 1
        if self.board[x][y] == self.board[x][y+1] == self.board[x][y+2] == self.board[x][y+3]:
            if ( gomoku_ai.checkBorder(self, x, y-1) and self.board[x][y-1] == 0) or ( gomoku_ai.checkBorder(self, x, y+4) and self.board[x][y+4] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x, y-1) and gomoku_ai.checkBorder(self, x, y+4) and self.board[x][y-1] == 0 and self.board[x][y+4] == 0:
                checkOppenedFour = 1
        for i in range (0,4):
            if self.board[x][y+i] == player:
                count += 1
        if count >= 4:
            check += 1
        x = saveX
        y = saveY
        while self.board[x-1][y-1] == player:
            y -= 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y+1] == self.board[x+2][y+2] == self.board[x+3][y+3]:
            if ( gomoku_ai.checkBorder(self, x-1, y-1) and self.board[x-1][y-1] == 0) or ( gomoku_ai.checkBorder(self, x+4, y+4) and self.board[x+4][y+4] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y-1) and gomoku_ai.checkBorder(self, x+4, y+4) and self.board[x-1][y-1] == 0 and self.board[x+4][y+4] == 0:
                checkOppenedFour = 1
        for i in range (0,4):
            if self.board[x+i][y+i] == player:
                count += 1
        if count >= 4:
            check += 1
        x = saveX
        y = saveY
        while self.board[x-1][y+1] == player:
            y += 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y-1] == self.board[x+2][y-2] == self.board[x+3][y-3]:
            if ( gomoku_ai.checkBorder(self, x-1, y+1) and self.board[x-1][y+1] == 0) or ( gomoku_ai.checkBorder(self, x+4, y-4) and self.board[x+4][y-4] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y+1) and gomoku_ai.checkBorder(self, x+4, y-4) and self.board[x-1][y+1] == 0 and self.board[x+4][y-4] == 0:
                checkOppenedFour = 1
        for i in range (0,4):
            if self.board[x+i][y-i] == player:
                count += 1
        if count >= 4:
            check += 1
        if check > 1 or checkOppenedFour == 1:
            if player == 1:
                movements += self.ia_has_openned_four
            else:
                movements += self.opponnent_has_openned_four
        else:
            if check == 1:
                if player == 1:
                    movements += self.ia_has_four
                else:
                    movements += self.opponent_has_four
        return movements

    def checkForThree(self, x, y, player):
        saveX = x
        saveY = y
        movements = 0
        check = 0
        checkOppenedThree = 0
        while self.board[x-1][y] == player:
            x -= 1
        if self.board[x][y] == self.board[x+1][y] == self.board[x+2][y]:
            if ( gomoku_ai.checkBorder(self, x-1, y) and self.board[x-1][y] == 0) or ( gomoku_ai.checkBorder(self, x+3, y) and self.board[x+3][y] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y) and gomoku_ai.checkBorder(self, x+3, y) and self.board[x-1][y] == 0 and self.board[x+3][y] == 0:
                checkOppenedThree += 1

        x = saveX
        y = saveY
        while self.board[x][y-1] == player:
            y -= 1
        if self.board[x][y] == self.board[x][y+1] == self.board[x][y+2]:
            if ( gomoku_ai.checkBorder(self, x, y-1) and self.board[x][y-1] == 0) or ( gomoku_ai.checkBorder(self, x, y+3) and  self.board[x][y+3] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x, y-1) and gomoku_ai.checkBorder(self, x, y+3) and self.board[x][y-1] == 0 and self.board[x][y+3] == 0:
                checkOppenedThree += 1

        x = saveX
        y = saveY
        while self.board[x-1][y-1] == player:
            y -= 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y+1] == self.board[x+2][y+2]:
            if ( gomoku_ai.checkBorder(self, x-1, y-1) and self.board[x-1][y-1] == 0) or ( gomoku_ai.checkBorder(self, x+3, y+3) and self.board[x+3][y+3] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y-1) and gomoku_ai.checkBorder(self, x+3, y+3) and self.board[x-1][y-1] == 0 and self.board[x+3][y+3] == 0:
                checkOppenedThree += 1

        x = saveX
        y = saveY
        while self.board[x-1][y+1] == player:
            y += 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y-1] == self.board[x+2][y-2]:
            if ( gomoku_ai.checkBorder(self, x-1, y+1) and self.board[x-1][y+1] == 0) or ( gomoku_ai.checkBorder(self, x+3, y-3) and self.board[x+3][y-3] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y+1) and gomoku_ai.checkBorder(self, x+3, y-3) and self.board[x-1][y+1] == 0 and self.board[x+3][y-3] == 0:
                checkOppenedThree += 1

        if checkOppenedThree > 1:
            if player == 1:
                movements += self.ia_has_three_and_two
            else:
                movements += self.opponnent_has_three_and_two
        else:
            if check > 1 or checkOppenedThree == 1:
                if player == 1:
                    movements += self.ia_has_openned_three
                else:
                    movements += self.opponnent_has_opened_three
            else:
                if check == 1:
                    if player == 1:
                        movements += self.ia_has_three
                    else:
                        movements += self.opponent_has_three

        return movements

    def checkForTwo(self, x, y, player):
        saveX = x
        saveY = y
        movements = 0
        check = 0
        checkOppenedTwo = 0
        while self.board[x-1][y] == player:
            x -= 1
        if self.board[x][y] == self.board[x+1][y]:
            if ( gomoku_ai.checkBorder(self, x-1, y) and self.board[x-1][y] == 0) or ( gomoku_ai.checkBorder(self, x+2, y) and self.board[x+2][y] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y) and gomoku_ai.checkBorder(self, x+2, y) and self.board[x-1][y] == 0 and self.board[x+2][y] == 0:
                checkOppenedTwo = 1
        x = saveX
        y = saveY
        while self.board[x][y-1] == player:
            y -= 1
        if self.board[x][y] == self.board[x][y+1]:
            if ( gomoku_ai.checkBorder(self, x, y-1) and self.board[x][y-1] == 0) or ( gomoku_ai.checkBorder(self, x, y+2) and self.board[x][y+2] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x, y-1) and gomoku_ai.checkBorder(self, x, y+2) and self.board[x][y-1] == 0 and self.board[x][y+2] == 0:
                checkOppenedTwo = 1
        x = saveX
        y = saveY
        while self.board[x-1][y-1] == player:
            y -= 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y+1]:
            if ( gomoku_ai.checkBorder(self, x-1, y-1) and self.board[x-1][y-1] == 0) or ( gomoku_ai.checkBorder(self, x+2, y+2) and self.board[x+2][y+2] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y-1) and gomoku_ai.checkBorder(self, x+2, y+2) and self.board[x-1][y-1] == 0 and self.board[x+2][y+2] == 0:
                checkOppenedTwo = 1
        x = saveX
        y = saveY
        while self.board[x-1][y+1] == player:
            y += 1
            x -= 1
        if self.board[x][y] == self.board[x+1][y-1]:
            if ( gomoku_ai.checkBorder(self, x-1, y+1) and self.board[x-1][y+1] == 0) or ( gomoku_ai.checkBorder(self, x+2, y-2) and self.board[x+2][y-2] == 0):
                check += 1
            if gomoku_ai.checkBorder(self, x-1, y+1) and gomoku_ai.checkBorder(self, x+2, y-2) and self.board[x-1][y+1] == 0 and self.board[x+2][y-2] == 0:
                checkOppenedTwo = 1
        if check > 1 or checkOppenedTwo == 1:
            movements += self.ia_has_two_oppened
        else:
            if check == 1:
                movements += self.ia_has_two
        return movements

    def checkBorder(self, x, y):
        if x < 0 or y < 0 or x >= self.dimension or y >= self.dimension:
            return False
        else:
            return True

    function_dictionary = {
        "START":startFunction,
        "TURN":turnFunction,
        "BEGIN":beginFunction,
        "BOARD":boardFunction,
        "INFO":infoFunction,
        "DISPLAY":displayBoard
    }
    info_dictionary = {
        "timeout_turn":setTurnTimeout,
        "timeout_match":setMatchTimeout,
        "max_memory":setMaxMemory,
        "time_left":setTimeLeft,
        "game_type":setGameType,
        "rule":setRule,
        "evaluate":setEvaluate,
        "folder":setFolder
    }
    timeout_turn = 0
    timeout_match = 0
    max_memory = 0
    time_left = 0
    game_type = 0
    rule = 0
    evaluate = 0
    folder = 0
    player = 0
    dimension = 0
    board = 0
    minEval = [0, 0, 100000000000]
    maxEval = [0, 0, -100000000000]
    case = [0, 0, 0]
    ia_has_five_full = 9000000000000
    opponent_has_five_full = 900000000000
    ia_has_openned_four = 90000000000
    opponnent_has_openned_four = 9000000000
    ia_has_four_and_three = 900000000
    opponent_has_four = 90000000
    ia_has_three_and_two = 9000000
    opponnent_has_three_and_two = 900000
    ia_has_openned_three = 15000
    opponnent_has_opened_three = 5000
    ia_has_four = 3000
    opponent_has_four = 2000
    ia_has_two_oppened = 1000
    ia_has_three = 600
    opponent_has_three = 300
    ia_has_two = 200

    def __init__(self):
        self.start()

    def start(self):
        while 1:
            commandMessage = input().split(" ")
            command = commandMessage[0]
            self.function_dictionary[command](self, commandMessage)


def main():
    gomoku_ai()
    return (0)

if __name__ == "__main__":
    main()